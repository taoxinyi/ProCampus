/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ChatMessage', null, global);
goog.exportSymbol('proto.ChatMessage.Type', null, global);
goog.exportSymbol('proto.ChatMessageItem', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatMessageItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ChatMessageItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatMessageItem.displayName = 'proto.ChatMessageItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatMessageItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatMessageItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatMessageItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessageItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    imageurl: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fileurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    filesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    filename: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatMessageItem}
 */
proto.ChatMessageItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatMessageItem;
  return proto.ChatMessageItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatMessageItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatMessageItem}
 */
proto.ChatMessageItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setImageurl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileurl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFilesize(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatMessageItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatMessageItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatMessageItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessageItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClientname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getImageurl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFileurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFilesize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 clientId = 1;
 * @return {number}
 */
proto.ChatMessageItem.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ChatMessageItem.prototype.setClientid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string clientName = 2;
 * @return {string}
 */
proto.ChatMessageItem.prototype.getClientname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ChatMessageItem.prototype.setClientname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ChatMessageItem.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ChatMessageItem.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string imageUrl = 4;
 * @return {string}
 */
proto.ChatMessageItem.prototype.getImageurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ChatMessageItem.prototype.setImageurl = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 timeStamp = 5;
 * @return {number}
 */
proto.ChatMessageItem.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ChatMessageItem.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string fileUrl = 6;
 * @return {string}
 */
proto.ChatMessageItem.prototype.getFileurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ChatMessageItem.prototype.setFileurl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 fileSize = 7;
 * @return {number}
 */
proto.ChatMessageItem.prototype.getFilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ChatMessageItem.prototype.setFilesize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string fileName = 8;
 * @return {string}
 */
proto.ChatMessageItem.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ChatMessageItem.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ChatMessage.repeatedFields_, null);
};
goog.inherits(proto.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ChatMessage.displayName = 'proto.ChatMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ChatMessage.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chatMessageItemList: jspb.Message.toObjectList(msg.getChatMessageItemList(),
    proto.ChatMessageItem.toObject, includeInstance),
    currentClientList: jspb.Message.toObjectList(msg.getCurrentClientList(),
    proto.ChatMessageItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ChatMessage;
  return proto.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ChatMessage}
 */
proto.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ChatMessage.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.ChatMessageItem;
      reader.readMessage(value,proto.ChatMessageItem.deserializeBinaryFromReader);
      msg.addChatMessageItem(value);
      break;
    case 3:
      var value = new proto.ChatMessageItem;
      reader.readMessage(value,proto.ChatMessageItem.deserializeBinaryFromReader);
      msg.addCurrentClient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChatMessageItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ChatMessageItem.serializeBinaryToWriter
    );
  }
  f = message.getCurrentClientList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ChatMessageItem.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ChatMessage.Type = {
  CHAT_MESSAGE: 0,
  CLIENT_ENTER: 1,
  CLIENT_LEAVE: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.ChatMessage.Type}
 */
proto.ChatMessage.prototype.getType = function() {
  return /** @type {!proto.ChatMessage.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ChatMessage.Type} value */
proto.ChatMessage.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated ChatMessageItem chat_message_item = 2;
 * @return {!Array.<!proto.ChatMessageItem>}
 */
proto.ChatMessage.prototype.getChatMessageItemList = function() {
  return /** @type{!Array.<!proto.ChatMessageItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatMessageItem, 2));
};


/** @param {!Array.<!proto.ChatMessageItem>} value */
proto.ChatMessage.prototype.setChatMessageItemList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ChatMessageItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatMessageItem}
 */
proto.ChatMessage.prototype.addChatMessageItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ChatMessageItem, opt_index);
};


proto.ChatMessage.prototype.clearChatMessageItemList = function() {
  this.setChatMessageItemList([]);
};


/**
 * repeated ChatMessageItem current_client = 3;
 * @return {!Array.<!proto.ChatMessageItem>}
 */
proto.ChatMessage.prototype.getCurrentClientList = function() {
  return /** @type{!Array.<!proto.ChatMessageItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ChatMessageItem, 3));
};


/** @param {!Array.<!proto.ChatMessageItem>} value */
proto.ChatMessage.prototype.setCurrentClientList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ChatMessageItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ChatMessageItem}
 */
proto.ChatMessage.prototype.addCurrentClient = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ChatMessageItem, opt_index);
};


proto.ChatMessage.prototype.clearCurrentClientList = function() {
  this.setCurrentClientList([]);
};


goog.object.extend(exports, proto);
